================
Basic operations
================

Create and inspect one card::

    >>> beer_card = Card('7', 'diamonds')
    >>> beer_card
    Card(rank='7', suit='diamonds')

Create deck, check length, fetch cards::

    >>> deck = FrenchDeck()
    >>> len(deck)
    52
    >>> deck[:3]
    [Card(rank='2', suit='spades'), Card(rank='3', suit='spades'), Card(rank='4', suit='spades')]
    >>> deck[12::13]
    [Card(rank='A', suit='spades'), Card(rank='A', suit='diamonds'), Card(rank='A', suit='clubs'), Card(rank='A', suit='hearts')]

The `in` operator::

    >>> Card('Q', 'hearts') in deck
    True
    >>> Card('Z', 'clubs') in deck
    False

Iteration::

    >>> for card in deck:  # doctest: +ELLIPSIS
    ...   print(card)
    Card(rank='2', suit='spades')
    Card(rank='3', suit='spades')
    Card(rank='4', suit='spades')
    ...
    >>> for card in reversed(deck):  # doctest: +ELLIPSIS
    ...   print(card)
    Card(rank='A', suit='hearts')
    Card(rank='K', suit='hearts')
    Card(rank='Q', suit='hearts')
    ...
    >>> for n, card in enumerate(deck, 1):  # doctest: +ELLIPSIS
    ...   print(n, card)
    1 Card(rank='2', suit='spades')
    2 Card(rank='3', suit='spades')
    3 Card(rank='4', suit='spades')
    ...
